name: CI-CD Security (unified)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  # --- SAST (Semgrep) ---
  sast_semgrep:
    runs-on: ubuntu-latest
    outputs:
      gate: ${{ steps.gate.outputs.gate }}
    steps:
      - uses: actions/checkout@v4
      - run: pip install semgrep

      # não falha o job por findings
      - name: Semgrep (SARIF)
        run: |
          semgrep --config "p/owasp-top-ten p/security-audit p/secrets" \
                  --sarif --output semgrep.sarif || true

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # gate por severidade (bloqueia deploy se tiver "error")
      - name: Decide gate (error-level findings)
        id: gate
        run: |
          sudo apt-get update >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          ERRORS=$(jq '[.runs[].results[]? | select(.level=="error")] | length' semgrep.sarif 2>/dev/null || echo 0)
          echo "error_findings=${ERRORS}"
          if [ "${ERRORS}" -gt 0 ]; then
            echo "gate=block" >> "$GITHUB_OUTPUT"
          else
            echo "gate=pass" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-report
          path: semgrep.sarif

  # --- SCA (OSV) ---
  sca_osv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Pull OSV-Scanner image
        run: docker pull ghcr.io/google/osv-scanner:latest

      - name: Run OSV-Scanner (Docker) -> SARIF robusto
        shell: bash
        run: |
          docker run --rm -v "$PWD":/repo -w /repo ghcr.io/google/osv-scanner:latest \
            -r . --format sarif --output /repo/osv.sarif || true
          # garante SARIF válido
          if [ ! -s osv.sarif ]; then
            printf '%s\n' \
              '{' \
              '  "version": "2.1.0",' \
              '  "runs": [{' \
              '    "tool": { "driver": { "name": "OSV-Scanner", "informationUri": "https://osv.dev", "rules": [] } },' \
              '    "results": []' \
              '  }]' \
              '}' > osv.sarif
          fi

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: osv.sarif

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: osv-report
          path: osv.sarif

  # --- Build (placeholder) ---
  build:
    runs-on: ubuntu-latest
    needs: [sast_semgrep, sca_osv]
    steps:
      - run: echo "Build ok (placeholder)"

  # --- Deploy Staging (placeholder) ---
  deploy_staging:
    runs-on: ubuntu-latest
    needs: [build]
    environment: staging
    outputs:
      target: ${{ steps.resolve.outputs.target }}
    steps:
      - name: Resolve TARGET (secret -> var -> fallback)
        id: resolve
        run: |
          T="${{ secrets.STAGING_URL }}"
          if [ -z "$T" ]; then T="${{ vars.STAGING_URL }}"; fi
          if [ -z "$T" ]; then T="https://example.com"; fi
          echo "Target resolved: $T"
          echo "target=$T" >> "$GITHUB_OUTPUT"
      - run: echo "Deploy para ${{ steps.resolve.outputs.target }} (placeholder)"

  # --- DAST (ZAP Baseline) ---
  dast_zap:
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    steps:
      - name: ZAP Baseline (gera HTML/JSON; não falha aqui)
        run: |
          TARGET="${{ needs.deploy_staging.outputs.target }}"
          echo "Scanning ${TARGET}"
          mkdir -p zap-out && chmod 777 zap-out
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm -u 0:0 -v "$PWD/zap-out":/zap/wrk ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "${TARGET}" -r zap-report.html -J zap-report.json -m 2 || true

      # gate: falha o job se houver HIGH
      - name: Gate por severidade (falha se HIGH)
        run: |
          sudo apt-get update >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          if [ ! -s zap-out/zap-report.json ]; then
            echo "::warning::ZAP não gerou JSON; passando sem bloquear."
            exit 0
          fi
          HIGH=$(jq '[.site[].alerts[]? | select((.riskcode|tonumber) >= 3)] | length' zap-out/zap-report.json)
          echo "DAST High findings: $HIGH"
          if [ "$HIGH" -gt 0 ]; then
            echo "::error::DAST encontrou $HIGH alertas HIGH. Bloqueando."
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report
          path: zap-out

  # --- Gate de Deploy Prod ---
  deploy_prod:
    runs-on: ubuntu-latest
    needs: [sast_semgrep, sca_osv, dast_zap]
    if: ${{ needs.sast_semgrep.outputs.gate == 'pass' && needs.sca_osv.result == 'success' && needs.dast_zap.result == 'success' }}
    steps:
      - run: echo "✅ Todos os checks OK — deploy liberado (placeholder)"

  # --- Notificação no PR ---
  notify:
    runs-on: ubuntu-latest
    needs: [sast_semgrep, sca_osv, dast_zap]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Post summary
        uses: actions/github-script@v7
        with:
          script: |
            const sastGate = '${{ needs.sast_semgrep.outputs.gate }}'
            const scaRes   = '${{ needs.sca_osv.result }}'
            const dastRes  = '${{ needs.dast_zap.result }}'
            const body = `
            ### Security checks
            - SAST (Semgrep): **${sastGate === 'pass' ? 'success' : 'findings (error)'}**
            - SCA  (OSV): **${scaRes}**
            - DAST (ZAP): **${dastRes}**

            > Deploy de produção é bloqueado automaticamente se SAST tiver \`error\` ou se DAST encontrar HIGH.
            `
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            })
